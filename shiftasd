#include<cstdio>
#include<cstdlib>

typedef struct node{
	int data;
	node *left;
	node *right;	
	node *parent;
};
void insertTreeNode(node **nd, int data){
	if((*nd) == NULL){
		(*nd) = (node*) malloc(sizeof(node));
		(*nd)->data = data;
		(*nd)->left = NULL;
		(*nd)->right = NULL;
		(*nd)->parent = NULL;
		return;
	}else{	
		node *subroot = *nd;
		if(data <= subroot->data ){
			insertTreeNode(&(subroot->left),data);
			subroot->left->parent = subroot;
		}else{
			insertTreeNode(&(subroot->right),data);
			subroot->right->parent = subroot;
		}
	}
}

void printTreeInOrder(node *nd){
	if(nd == NULL) return;
	printTreeInOrder(nd->right);	
	printTreeInOrder(nd->left);
	printf("%d ",nd->data);
}

void clearTree(node *nd)
{
	if(nd == NULL) return;
	if(nd->left != NULL)
	{
		clearTree(nd->left);
	}
	if(nd->right != NULL)
	{
		clearTree(nd->right);
	}
	nd->data = NULL;
	free(nd);
}



int main(){
	node *root = NULL;
	int inp;
	while(1)
	{
		scanf("%d",&inp);
		if(inp == 0)
		{
			printTreeInOrder(root);
			puts("");
			clearTree(root);
		}
		else
		{		
			insertTreeNode(&root,inp);
		}
	}
	/*insertTreeNode(&root,6);	
	insertTreeNode(&root,9);
	insertTreeNode(&root,2);
	insertTreeNode(&root,5);
	insertTreeNode(&root,3);  
	insertTreeNode(&root,4);
	insertTreeNode(&root,8);
	insertTreeNode(&root,0); */
	/* print tree in order */
}
